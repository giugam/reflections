Q:1
=====
How did viewing a diff between two versions of a file help you see the bug
that was introduced?

Being able to quickly examine through the report provided by git, comparing
the lines of code/text removed (-) and/or added (+).
=====

Q:2
=====
How could having easy access to the entire history of a file make you a 
more efficient programmer in the long term?

It is much more efficient to have the entire history of a file at your 
disposal. Instead of wasting time trying to remember or locate different
changes or files of a project, one can just focus on writing code.
Also, when a project is paused for some time, it is crucial to have 
access to its complete history, because regardless of how smaller or bigger 
the projects is, I believe everyone tend to forget some parts or steps,
because it is not always possible or easy to recall all the details/changes
made to a project.
=====

Q:3
=====
What do you think are the pros and cons of manually choosing when to create
a commit, like you do in Git, vs having versions automatically saved, like
Google Docs does?

It enable the programmer to precisely select a clear purpose for that
commit. The automatic saving may include commits that may or may not
have a purpose at all. Additionally, a programmer is encouraged to divide
the work into smaller units, which to me is a more pragmatic and logical
process to follow. Same applies to adding more functionalities or bug fixes,
the point is to have one clear purpose to be achieved, then commit that
change, then move on to the next one.
=====

Q:4
=====
Why do you think some version control systems, like Git, allow saving
multiple files in one commit, while others, like Google Docs, treat each
file separately?

Because most of the files of a program are interrelated and parts of code
in one file is called by another part of code in a different file, it
makes sense to allow saving multiple files in one commit.
=====

Q:5
=====
How can you use the commands git log and git diff to view the history of
files?

'git log' shows the sequence of the various commits. To scroll down press
the 'down arrow', to exit press the 'q'.
'git log - stats' should give additional information and statistics of
the log. However in git version 2.5.0 this command (-stats) is no longer
working.
'git diff first_original_commit_ID1 new_commit_ID2' displays information
about the two different commits with:
 --- before code lines that have been removed from a file
 +++ before code lines that have been added to a file
 =====

 Q:6
 =====
 How might using version control make you more confident to make changes
 that could break something?

 The possibility of revert to previous (committed) changes made to the
 code allows for a much greater control, especially when looking for bugs
 in newly committed code. The use of "git diff old_commit new_commit" 
 enables to check what was accidentally removed or added, or typos etc
 which would take a long time otherwise. This can also being used to 
 experiment with new implementations or experimental work, with the
 possibility to go back and forth instantaneously. Awesome!
 =====

 Q:7
 =====
 Now that you have your workspace set up, what do you want to try using
 Git for?

 Use git to implement version control in my projects.
 =====

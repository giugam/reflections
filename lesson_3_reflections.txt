Q1:
=====
When would you want to use a remote repository rather than keeping all your work local?

While collaborating with other developers. This feature is useful because
it allows developers to collaborate and work simultaneously on the same file.
=====

Q:2
=====
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Pulling changes manually allows for greater control. Being able to
decide when to sync a 'remote' with a 'local' repository gives the developer
the possibility to choose how to proceed.
=====

Q:3
=====
Describe the differences between forks, clones, and branches. When would you use one instead of another?

Branches:
Operates on a local repository, allowing to differentiate a project or make
experimental changes without affecting the main project.

Clones:
Operates on a local or remote repository. It allows to duplicate a local
repository or to clone a remote repository on GitHub on your local
machine. It is possible to clone a forked project using the provided link
that is present on the respective GitHub page.

Forks:
Operates only on a remote repository on GitHub. It allows to duplicate
a repository of another developer into your own GitHub space. This method
keeps track of who has forked the project, as well as maintain a reference
to the original developer. By invoking this command on GitHub generates automatically a remote repository called 'origin'. 
=====

Q:4
=====
What is the benefit of having a copy of the last known state of the remote stored locally?

When collaborating with other people, this feature is very useful because
it allows various collaborators to work at the same time. The changes
made by a collaborator on a remote repository can be imported locally, 
using the fetch command, to the local origin/master branch (which keeps 
track of the last known state of the remote) without having an impact on 
the master local branch. Then these changes can be merged afterwards into
the local master branch. Another benefit occurs when developing
locally without internet access, if a collaborator makes changes on the
remote repository, then these changes can be fetched locally when the net becomes available again.
=====

Q:5
=====
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Collaborating without using Git / GitHub will involve a great deal of communication between collaborators, and might result in a much less 
efficient way of sharing information and stick to a schedule. Also it might create more confusion and uncertainty.

What would be easier:
Nothing (aside from not having to deal with the Git/GitHub learning curve) 

What would be harder:
Track changes, and in general having to deal with multiple versions of
code. Spend more time to locate bugs and fix them, after multiple changes
are added to the code. Increase of difficulties in proposing and testing
new changes or variations. Increase of difficulties in collaborating with others.
=====

Q:6
=====
When would you want to make changes in a separate branch rather than 
directly in master? What benefits does each approach have?

When collaborating with others it is useful to create a separate new
branch for a specific change, then push that branch on GitHub so that
a pull request can be created and other collaborators can look at it
and check these changes and give comments and feedback. This approach
is neat because branches can have a limited life-span which is related
to that specific task, and then once that task is completed, the pull 
request can be merged back into the master branch, and that specific 
branch can be deleted.
Working only on the master branch can be more straightforward and easy
especially when there are no collaborators involved. However using
different branches, for modifications or experimental changes, can be
very helpful because this method gives more freedom and peace of mind
since the main code remains untouched on the master branch.
=====



Q1:
=====
What happens when you initialize a repository? Why do you need to do it?

The folder becomes a repository and git adds metadata to track changes
to this repository and the files contained in it. This should be done
otherwise no tracking will be done. This can be done off line.
=====

Q:2
=====
How is the staging area different from the working directory and the
repository? What value do you think it offers?

The 'staging area' is a temporary container which allows to collect one
or more files that will form part of a commit. The' working
area' contains all the files, even those that might never be commited.
The 'repository' instead consists of the collection of both entities and
keeps track of what is in the working directory, and what is in the
staging area, ready to be commited, and once files will be commited
these will form one logical group in one commit.
=====

Q:3
=====
How can you use the staging area to make sure you have one commit per
logical change?

The 'staging area' can be populated using 'git add modified_file.xxx'.
All the updated files can be added in this way. In case some
time has passed, to find out which changes have been made, it is
possible to use 'git diff' to find out the differences between the
working area and the staging area, or the 'git diff -staged' to find
out the differences between the staging area and the most recent
commit.
=====

Q:4
=====
What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

'Branches' are lables to provide an independed new line of changes,
whether this refers to try out an experimental change or for example to
introduce a new feature.
It is possible to 'checkout' (reposition) into different branches, the
last commit of a branch is referred to as the 'tip' of that branch. 
The standard branch is the 'master' branch. Branches can also be merged
into the main stem or master branch. Being able to give
self-explenatory names to branches allows us to identify them more
easily, enabling us to join logically a series of commit into a branch.
=====

Q:5
=====
How do the diagrams help you visualize the branch structure?

It provides indication of the history of the project through each of
the branches. If we checkout a specific commit, the 'head' is
repositioned there and if we make changes and then commit, the new
commit will occur at that point and it won't be reachable (unless 
we write down its ID). 
By using the command 'git checkout -b new_branch_name' we create a
new branch starting with that commit and we checkout into that new
branch. Very useful double command! The diagrams help to show the
branches of a project using the command 'git log --graph'.
=====

Q:6
=====
What is the result of merging two branches together? Why do we
represent it in the diagram the way we do?

Merging two branches means to incorporate all the commits of a
branch into another, still retaining all their individual commits
even if they belong to different branches. The commits get aligned
sequentially using their  time-stamp. This means that the commits
might be intertwined between one another. To determine which is the
previous commit of another one, we can use 'git show commit_ID'
which will display the differences between that commit and its parent
(even if we don't know the ID of the previous commit). A merge of two
branches generates another commit which refers to the two commits
belonging to the two merging branches. 
It is possible to cancel the label of the branch that has been merged
into another using 'git branch -d branch_label'.
=====

Q:7
=====
What are the pros and cons of Gitâ€™s automatic merging vs. always
doing merges manually?

The automatic merging helps the process of fusing between two branches. 
Often it is usefull to merge the master branch into a different branch
used for new or experimental development, therefore incorporating the
official code into the new branch. Automatic merging enables us to
automatically track conflicts and resolve them using the comments added
by git to the file(s) with the conflicting code. Therefore git does not
assume or guess how to merge, but it leaves the user to figure out what
is best to do. The cons of automatic merging is to resolve conflicts,
which may require some time and effort to understand the code and the
changes made by others, however the conflicts are highlighted by git
in the code.
=====
